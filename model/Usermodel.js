import mongoose from "mongoose";
import bcrypt from "bcryptjs"; // ЁЯСИ рдкрд╛рд╕рд╡рд░реНрдб рд╣реИрд╢рд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдЗрд╕реЗ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ

const pointSchema = new mongoose.Schema({
  type: {
    type: String,
    enum: ["Point"],
    required: true,
  },
  coordinates: {
    type: [Number], // [longitude, latitude]
    required: true,
  },
});

const Usermodel = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    phone_no: {
      type: Number,
      required: true,
      unique: true, // ЁЯСИ рдлрд╝реЛрди рдирдВрдмрд░ рдпреВрдирд┐рдХ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП
    },
    password: {
      type: String,
      required: true,
      select: false, // ЁЯСИ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рд░реВрдк рд╕реЗ рдкрд╛рд╕рд╡рд░реНрдб рди рднреЗрдЬреЗрдВ
    },
    // +++ рдирдпрд╛ рдПрдбреНрд░реЗрд╕ рд╕реЗрдХреНрд╢рди +++
    address: {
      houseNumber: String,
      landmark: String,
      location: {
        type: pointSchema,
        index: "2dsphere", // ЁЯСИ рдЬрд┐рдпреЛ-рд▓реЛрдХреЗрд╢рди рдХреНрд╡реЗрд░реА рдХреЗ рд▓рд┐рдП рдмрд╣реБрдд рдЬрд╝рд░реВрд░реА
      },
    },
  },
  {
    timestamps: true,
  }
);

// +++ рдкрд╛рд╕рд╡рд░реНрдб рд╣реИрд╢ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП +++
Usermodel.pre("save", async function (next) {
  if (!this.isModified("password")) {
    return next();
  }
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

// +++ рдкрд╛рд╕рд╡рд░реНрдб рддреБрд▓рдирд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП +++
Usermodel.methods.comparepassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

export default mongoose.model("User", Usermodel);
